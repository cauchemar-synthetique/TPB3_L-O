Partie 4 : Autour de l'application
Dans cette derniÃ¨re partie, on va s'intÃ©resser toujours Ã  amÃ©liorer le niveau de sÃ©curitÃ© de l'application.
Mais cette fois-ci en s'intÃ©ressant un peu plus Ã  ce qu'on peut faire Ã  l'extÃ©rieur du service.

Sommaire
Partie 4 : Autour de l'application
Sommaire
1. Firewalling
2. ProtÃ©ger l'app contre le flood
3. EmpÃªcher le programme de faire des actions indÃ©sirables
1. Firewalling
Le firewall permet de filtrer les connexions entrantes sur la machine, mais aussi les connexions sortantes.

ðŸŒž Configurer de faÃ§on robuste le firewall

bash
Copier le code
$ sudo iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
$ sudo iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
$ sudo iptables -I INPUT -p tcp --dport 8888 -j ACCEPT
$ sudo iptables -I OUTPUT -p tcp --sport 8888 -j ACCEPT
$ sudo iptables -A INPUT -i lo -j ACCEPT
$ sudo iptables -A OUTPUT -o lo -j ACCEPT
$ sudo iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
$ sudo iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
$ sudo iptables -P INPUT DROP
$ sudo iptables -P OUTPUT DROP
RÃ©sultat de la configuraton

bash
Copier le code
$ sudo iptables -L
Chain INPUT (policy DROP)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ddi-tcp-1
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh
ACCEPT     all  --  anywhere             anywhere
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy DROP)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             anywhere             tcp spt:ddi-tcp-1
ACCEPT     tcp  --  anywhere             anywhere             tcp spt:ssh state ESTABLISHED
ACCEPT     all  --  anywhere             anywhere
ACCEPT     tcp  --  anywhere             anywhere             tcp spt:ssh state ESTABLISHED
ðŸŒž Prouver que la configuration est effective

prouver que les connexions sortantes sont bloquÃ©es
bash
Copier le code
$ curl example.com
curl: (6) Could not resolve host: example.com
prouver que les pings sont bloquÃ©s, mais une connexion SSH fonctionne
bash
Copier le code
$ ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
--- 8.8.8.8 ping statistics ---
72 packets transmitted, 0 received, 100% packet loss, time 71364ms
2. ProtÃ©ger l'app contre le flood
ðŸŒž Installer fail2ban sur la machine

bash
Copier le code
sudo dnf install epel-release
sudo dnf install fail2ban
ðŸŒž Ajouter une jail fail2ban

bash
Copier le code
[DEFAULT]
enabled  = true
port     = ssh
logpath  = /var/log/efrei_serverlog/server.log
maxretry = 3
findtime = 600
bantime  = 600

[sshd]
enabled  = true
filter   = sshd
action   = iptables[name=SSH, port=ssh, protocol=tcp]
ðŸŒž VÃ©rifier que Ã§a fonctionne !

bash
Copier le code
for i in {1..10}; do ssh -p 22 cauchemar@192.168.56.101 -vvv; done
bash
Copier le code
$ ssh cauchemar@192.168.100.1
ssh_connect: connect failed: Connection refused
bash
Copier le code
$ sudo fail2ban-client set sshd unbanip 192.168.100.1
3. EmpÃªcher le programme de faire des actions indÃ©sirables
bash
Copier le code
sudo dnf install seccomp-tools
bash
Copier le code
sudo seccomp-tool generate --default allow --add syscalls=open,read,write,close,socket,connect,bind,listen,recv,send,mmap,munmap,exit_group > /usr/local/bin/efrei_server/seccomp.policy
bash
Copier le code
[Unit]
Description=Super serveur EFREI

[Service]
ExecStart=/usr/local/bin/efrei_server/app
Seccomp=/usr/local/bin/efrei_server/seccomp.policy

EnvironmentFile=/usr/local/bin/efrei_server/env
Restart=always
User=efreiuser
bash
Copier le code
sudo systemctl daemon-reload
sudo systemctl restart efrei_server
